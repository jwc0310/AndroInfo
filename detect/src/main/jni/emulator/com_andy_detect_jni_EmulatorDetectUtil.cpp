/* DO NOT EDIT THIS FILE - it is machine generated */

#include <jni.h>
#include <stddef.h>
#include <unistd.h>
#include <sys/mman.h>
#include <fcntl.h>
#include <signal.h>

#include "util/log.h"

#define PROT PROT_EXEC|PROT_WRITE|PROT_READ
//检测是在x86 还是 arm平台上运行

const int handleSignals[] = {
        SIGSEGV, SIGABRT, SIGFPE, SIGILL, SIGBUS
};

const int handleSignalsNum = sizeof(handleSignals) / sizeof(handleSignals[0]);

struct sigaction old_handlers[5];

void my_sigaction(int signal, siginfo_t *info, void *reserved) {
    LOGI("crash detected signal %d", signal);
    _exit(0);
}

int load(JNIEnv *env) {
    struct sigaction handler;
    memset(&handler, 0, sizeof(struct sigaction));
    handler.sa_sigaction = my_sigaction;
    handler.sa_flags = SA_RESETHAND;

    int i = 0;
    for ( ; i < handleSignalsNum; ++i) {
        sigaction(handleSignals[i], &handler, &old_handlers[i]);
    }
    return 1;
}

//函数指针
int (*asmcheck) (void);


/*
 * Class:     com_andy_detect_jni_EmulatorDetectUtil
 * Method:    detect
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_andy_detect_jni_EmulatorDetectUtil_detect
(JNIEnv *env, jclass clazz) {

    load(env);

    char code[] =
                "\x04\xe0\x2d\xE5"
                "\x00\x20\xA0\xE3"
                "\x00\x00\xA0\xE3"
                "\x01\x20\x82\xE2"
                "\x0c\x30\x4f\xe2"
                "\x00\x10\x93\xE5"
                "\x01\x00\x80\xE2"
                "\x0c\x30\x4f\xe2"
                "\x00\x10\x83\xE5"
                "\x0A\x00\x50\xE3"
                "\x02\x00\x00\xAA"
                "\x0A\x00\x52\xE3"
                "\x00\x00\x00\xAA"
                "\xf7\xff\xff\xea"
                "\x04\xf0\x9d\xE4"
                "\x00\x00\xa0\xe1"
                "\x00\x00\xa0\xe1"
                "\x00\x00\xa0\xe1"
                "\x00\x00\xa0\xe1"
                "\x00\x00\xa0\xe1"
                "\x00\x00\xa0\xe1"
                 "\x00\x00\xa0\xe1"
                 "\x00\x00\xa0\xe1"
                 "\x00\x00\xa0\xe1"
                 "\x00\x00\xa0\xe1"
                 "\x00\x00\xa0\xe1"
                 "\x00\x00\xa0\xe1"
                 "\x00\x00\xa0\xe1"
                 "\x00\x00\xa0\xe1"
                 "\x00\x00\xa0\xe1"
                 "\x00\x00\xa0\xe1";

    long size = getpagesize();

    void *exec = mmap(NULL, (size_t) size, PROT, MAP_ANONYMOUS | MAP_PRIVATE, -1, (off_t) 0);
    //这个地方应该有mmap失败判断

    memcpy(exec, code, (size_t) size);

    __clear_cache(exec , (char *)exec + (size_t) size);

    asmcheck = (int (*)()) exec;

    int ret = -1;
    ret = asmcheck();

    LOGI("result = %d", ret);
    munmap(exec, (size_t) size);

    return ret == 1;
}
